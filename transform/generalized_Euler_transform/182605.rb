def s(f_ary, g_ary, n)
  s = 0
  (1..n).each{|i| s += i * f_ary[i] * g_ary[i] ** (n / i) if n % i == 0}
  s
end

def A(f_ary, g_ary, n)
  ary = [1]
  a = [0] + (1..n).map{|i| s(f_ary, g_ary, i)}
  (1..n).each{|i| ary << (1..i).inject(0){|s, j| s + a[j] * ary[-j]} / i}
  ary
end

n = 50
ary1 = Array.new(n + 1, -1)
ary2 = Array.new(n + 1,  1)
ary3 = Array.new(n + 1, 11)

# Product_{k>0} (1 - x^k)
p A(ary1, ary2, n)

# Product_{k>0} 1/(1 - 11*x^k)
p A(ary2, ary3, n)

def A_rational(f1_ary, g1_ary, f2_ary, g2_ary, n)
  ary = [1]
  a = [0] + (1..n).map{|i| s(f1_ary, g1_ary, i) + s(f2_ary, g2_ary, i)}
  (1..n).each{|i| ary << (1..i).inject(0){|s, j| s + a[j] * ary[-j]} / i}
  ary
end

# Product_{k>0} (1 - x^k)/(1 - 11*x^k)
p A_rational(ary1, ary2, ary2, ary3, n)

=begin
Output

[1, -1, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 11, 132, 1463, 16225, 178607, 1966261, 21630455, 237952682, 2617498510, 28792679762, 316719689506, 3483918761367, 38323108728861, 421554219998835, 4637096446094156, 51008061171076361, 561088673169440647, 6171975407770697525, 67891729488644037570, 746809024407064680127, 8214899268512568196312, 90363891953990063899292, 994002811494274181458815, 10934030926440886243732115, 120274340190853967287326168, 1323017742099436213492375956, 14553195163093844756354991850, 160085146794032760630348805468, 1760936614734360877427880254395, 19370302762077974803157598074934, 213073330382857728450209882713792, 2343806634211435069618343009407019, 25781872976325785827572409210124303, 283600602739583644726623339416212130, 3119606630135420092672334548326406243, 34315672931489621026252279619105901417, 377472402246385831296249336845851708957, 4152196424710244144334165309768361651825, 45674160671812685587758035326907984116555, 502415767389939541466168037300943768746598, 5526573441289334956128752796523462660242623, 60792307854182684517425406898041391433721784, 668715386396009529691689424127413698605707731, 7355869250356104826608684052901757210700828095, 80914561753917153092695634012663688854872074184, 890060179293088684019653078401809609668581370788, 9790661972223975524216185066158105654897263323314, 107697281694463730766378047874626825553516295417563, 1184670098639101038430158539862015354894109437041295, 13031371085030111422731744072097933332622156989817706]
[1, 10, 120, 1320, 14630, 160920, 1771440, 19485720, 214357440, 2357931730, 25937408640, 285311493720, 3138428201160, 34522710196920, 379749831637440, 4177248147997440, 45949729842155150, 505447028263532520, 5559917313256631160, 61159090445821012920, 672749994929966636760, 7400249944229631089040, 81402749386811232247440, 895430243254923533494920, 9849732675807297275592480, 108347059433880269796105730, 1191817653772717490233879440, 13109994191499892392339192240, 144209936106499196062973253960, 1586309297171491156690116280920, 17449402268886406900836858977280, 191943424957750475909176943055720, 2111377674535255280950647731461560, 23225154419887808090457096561611040, 255476698618765889500474776880704240, 2810243684806424784505222232127038640, 30912680532870672635117361553327001390, 340039485861577398986290973634841441320, 3740434344477351388910359796979912881040, 41144777789250865278013957763329875804240, 452592555681759518058826285353589313894880, 4978518112499354698647089138851513145028120, 54763699237492901685125380777272933443906880, 602400691612421918536379188549584577247460120, 6626407607736641103900252476794399498824644760, 72890483685103052142902777244737976824920375560, 801795320536133573571931445122356405400940658240, 8819748525897469309291245896345915864813591664120, 97017233784872162402203714709537745725963610241800, 1067189571633593786424240861804915152441586443882530, 11739085287969531650666649588201126060197159400846360]

=end
